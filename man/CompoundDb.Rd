% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/CompoundDb.R, R/CompoundDb-methods.R
\docType{methods}
\name{CompoundDb}
\alias{CompoundDb}
\alias{CompoundDb-class}
\alias{show,CompoundDb-method}
\alias{dbconn,CompoundDb-method}
\alias{show}
\alias{dbconn}
\alias{CompoundDb}
\alias{compounds}
\alias{src_compdb}
\alias{tables}
\alias{dbconn,CompoundDb-method}
\title{Simple compound (metabolite) databases}
\usage{
show(object)

CompoundDb(x)

compounds(x, columns, filter, return.type = "data.frame")

src_compdb(x)

tables(x)

\S4method{dbconn}{CompoundDb}(x)
}
\arguments{
\item{x}{For \code{CompoundDb}: \code{character(1)} with the file name of the SQLite
compound database. Alternatively it is possible to provide the connection
to the database with parameter \code{x}.\preformatted{For all other methods: a `CompoundDb` object.
}}

\item{columns}{For \code{compounds}: \code{character} with the names of the database
columns that should be retrieved. Use \code{tables} for a list of available
column names.}

\item{filter}{For \code{compounds}: not yet supported.}

\item{return.type}{For \code{compounds}: \code{character} defining the type/class of
the return object. Can be either \code{"data.frame"} (default) or
\code{"tibble"}.}

\item{object}{For all methods: a \code{CompoundDb} object.}
}
\description{
\code{CompoundDb} objects provide access to general (metabolite) compound
annotations along with \emph{metadata} information such as the annotation's
source, date and release version. The data is stored internally in a
database (usually an SQLite database).

\code{CompoundDb} \emph{constructs} a \code{CompoundDb} object by connecting
to the provided database file.

\code{compounds} extracts compound data from the \code{CompoundDb} object. In contrast
to \code{src_compdb} it returns the actual data as a \code{data.frame} (if
\code{return.type = "data.frame"}) or a \code{\link[tibble:tibble]{tibble::tibble()}} (if
\code{return.type = "tibble"}).

\code{src_compdb} provides access to the \code{CompoundDb}'s database \emph{via}
the functionality from the \code{dplyr}/\code{dbplyr} package.

\code{tables} returns a named \code{list} (names being table names) with
the fields/columns from each table in the database.

\code{dbconn} returns the connection (\code{DBIConnection}) to the
database.
}
\details{
\code{CompoundDb} objects should be created using the constructor function
\code{CompoundDb} providing the name of the (SQLite) database file providing
the compound annotation data.
}
\examples{

## Create a small CompoundDb from a provided HMDB subset
cmps <- generate_hmdb_tbl(system.file("extdata/hmdb/hmdb_sub.xml",
    package = "PeakABro"))
metad <- data.frame(name = c("source", "url", "source_version",
    "source_date", "organism"),
    value = c("sub_HMDB", "http://www.hmdb.ca", "4", "2017", "Hsapiens"),
    stringsAsFactors = FALSE)
## Create the SQLite database:
db_file <- createCompoundDb(cmps, metadata = metad, path = tempdir())

## Create a CompoundDb object
cmp_db <- CompoundDb(db_file)
cmp_db

## List all tables in the database and their columns
tables(cmp_db)

## Extract a data.frame with the id, name and inchi of all compounds
compounds(cmp_db, columns = c("id", "name", "inchi"))

## Use the CompoundDb in a dplyr setup
library(dplyr)
src_cmp <- src_compdb(cmp_db)
src_cmp

## Get a tbl for the compound table
cmp_tbl <- tbl(src_cmp, "compound")

## Extract the id, name and inchi
cmp_tbl \%>\% select(id, name, inchi) \%>\% collect()
}
\seealso{
\code{\link[=createCompoundDb]{createCompoundDb()}} for the function to create a SQLite compound
database.
}
\author{
Johannes Rainer
}
